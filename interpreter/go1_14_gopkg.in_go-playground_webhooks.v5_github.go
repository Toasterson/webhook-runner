// Code generated by 'goexports gopkg.in/go-playground/webhooks.v5/github'. DO NOT EDIT.

// +build go1.14,!go1.15

package interpreter

import (
	"gopkg.in/go-playground/webhooks.v5/github"
	"reflect"
)

func init() {
	Symbols["gopkg.in/go-playground/webhooks.v5/github"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"BranchSubtype":                            reflect.ValueOf(github.BranchSubtype),
		"CheckRunEvent":                            reflect.ValueOf(github.CheckRunEvent),
		"CheckSuiteEvent":                          reflect.ValueOf(github.CheckSuiteEvent),
		"CommitCommentEvent":                       reflect.ValueOf(github.CommitCommentEvent),
		"CreateEvent":                              reflect.ValueOf(github.CreateEvent),
		"DeleteEvent":                              reflect.ValueOf(github.DeleteEvent),
		"DeploymentEvent":                          reflect.ValueOf(github.DeploymentEvent),
		"DeploymentStatusEvent":                    reflect.ValueOf(github.DeploymentStatusEvent),
		"ErrEventNotFound":                         reflect.ValueOf(&github.ErrEventNotFound).Elem(),
		"ErrEventNotSpecifiedToParse":              reflect.ValueOf(&github.ErrEventNotSpecifiedToParse).Elem(),
		"ErrHMACVerificationFailed":                reflect.ValueOf(&github.ErrHMACVerificationFailed).Elem(),
		"ErrInvalidHTTPMethod":                     reflect.ValueOf(&github.ErrInvalidHTTPMethod).Elem(),
		"ErrMissingGithubEventHeader":              reflect.ValueOf(&github.ErrMissingGithubEventHeader).Elem(),
		"ErrMissingHubSignatureHeader":             reflect.ValueOf(&github.ErrMissingHubSignatureHeader).Elem(),
		"ErrParsingPayload":                        reflect.ValueOf(&github.ErrParsingPayload).Elem(),
		"ForkEvent":                                reflect.ValueOf(github.ForkEvent),
		"GollumEvent":                              reflect.ValueOf(github.GollumEvent),
		"InstallationEvent":                        reflect.ValueOf(github.InstallationEvent),
		"InstallationRepositoriesEvent":            reflect.ValueOf(github.InstallationRepositoriesEvent),
		"IntegrationInstallationEvent":             reflect.ValueOf(github.IntegrationInstallationEvent),
		"IntegrationInstallationRepositoriesEvent": reflect.ValueOf(github.IntegrationInstallationRepositoriesEvent),
		"IssueCommentEvent":                        reflect.ValueOf(github.IssueCommentEvent),
		"IssueSubtype":                             reflect.ValueOf(github.IssueSubtype),
		"IssuesEvent":                              reflect.ValueOf(github.IssuesEvent),
		"LabelEvent":                               reflect.ValueOf(github.LabelEvent),
		"MemberEvent":                              reflect.ValueOf(github.MemberEvent),
		"MembershipEvent":                          reflect.ValueOf(github.MembershipEvent),
		"MetaEvent":                                reflect.ValueOf(github.MetaEvent),
		"MilestoneEvent":                           reflect.ValueOf(github.MilestoneEvent),
		"New":                                      reflect.ValueOf(github.New),
		"NoSubtype":                                reflect.ValueOf(github.NoSubtype),
		"Options":                                  reflect.ValueOf(&github.Options).Elem(),
		"OrgBlockEvent":                            reflect.ValueOf(github.OrgBlockEvent),
		"OrganizationEvent":                        reflect.ValueOf(github.OrganizationEvent),
		"PageBuildEvent":                           reflect.ValueOf(github.PageBuildEvent),
		"PingEvent":                                reflect.ValueOf(github.PingEvent),
		"ProjectCardEvent":                         reflect.ValueOf(github.ProjectCardEvent),
		"ProjectColumnEvent":                       reflect.ValueOf(github.ProjectColumnEvent),
		"ProjectEvent":                             reflect.ValueOf(github.ProjectEvent),
		"PublicEvent":                              reflect.ValueOf(github.PublicEvent),
		"PullRequestEvent":                         reflect.ValueOf(github.PullRequestEvent),
		"PullRequestReviewCommentEvent":            reflect.ValueOf(github.PullRequestReviewCommentEvent),
		"PullRequestReviewEvent":                   reflect.ValueOf(github.PullRequestReviewEvent),
		"PullSubtype":                              reflect.ValueOf(github.PullSubtype),
		"PushEvent":                                reflect.ValueOf(github.PushEvent),
		"ReleaseEvent":                             reflect.ValueOf(github.ReleaseEvent),
		"RepositoryEvent":                          reflect.ValueOf(github.RepositoryEvent),
		"RepositoryVulnerabilityAlertEvent":        reflect.ValueOf(github.RepositoryVulnerabilityAlertEvent),
		"SecurityAdvisoryEvent":                    reflect.ValueOf(github.SecurityAdvisoryEvent),
		"StatusEvent":                              reflect.ValueOf(github.StatusEvent),
		"TagSubtype":                               reflect.ValueOf(github.TagSubtype),
		"TeamAddEvent":                             reflect.ValueOf(github.TeamAddEvent),
		"TeamEvent":                                reflect.ValueOf(github.TeamEvent),
		"WatchEvent":                               reflect.ValueOf(github.WatchEvent),

		// type definitions
		"Asset":                               reflect.ValueOf((*github.Asset)(nil)),
		"Assignee":                            reflect.ValueOf((*github.Assignee)(nil)),
		"CheckRunPayload":                     reflect.ValueOf((*github.CheckRunPayload)(nil)),
		"CheckSuitePayload":                   reflect.ValueOf((*github.CheckSuitePayload)(nil)),
		"CommitCommentPayload":                reflect.ValueOf((*github.CommitCommentPayload)(nil)),
		"CreatePayload":                       reflect.ValueOf((*github.CreatePayload)(nil)),
		"DeletePayload":                       reflect.ValueOf((*github.DeletePayload)(nil)),
		"DeploymentPayload":                   reflect.ValueOf((*github.DeploymentPayload)(nil)),
		"DeploymentStatusPayload":             reflect.ValueOf((*github.DeploymentStatusPayload)(nil)),
		"Event":                               reflect.ValueOf((*github.Event)(nil)),
		"EventSubtype":                        reflect.ValueOf((*github.EventSubtype)(nil)),
		"ForkPayload":                         reflect.ValueOf((*github.ForkPayload)(nil)),
		"GollumPayload":                       reflect.ValueOf((*github.GollumPayload)(nil)),
		"InstallationPayload":                 reflect.ValueOf((*github.InstallationPayload)(nil)),
		"InstallationRepositoriesPayload":     reflect.ValueOf((*github.InstallationRepositoriesPayload)(nil)),
		"IssueCommentPayload":                 reflect.ValueOf((*github.IssueCommentPayload)(nil)),
		"IssuesPayload":                       reflect.ValueOf((*github.IssuesPayload)(nil)),
		"Label":                               reflect.ValueOf((*github.Label)(nil)),
		"LabelPayload":                        reflect.ValueOf((*github.LabelPayload)(nil)),
		"MemberPayload":                       reflect.ValueOf((*github.MemberPayload)(nil)),
		"MembershipPayload":                   reflect.ValueOf((*github.MembershipPayload)(nil)),
		"MergedBy":                            reflect.ValueOf((*github.MergedBy)(nil)),
		"MetaPayload":                         reflect.ValueOf((*github.MetaPayload)(nil)),
		"Milestone":                           reflect.ValueOf((*github.Milestone)(nil)),
		"MilestonePayload":                    reflect.ValueOf((*github.MilestonePayload)(nil)),
		"Option":                              reflect.ValueOf((*github.Option)(nil)),
		"OrgBlockPayload":                     reflect.ValueOf((*github.OrgBlockPayload)(nil)),
		"OrganizationPayload":                 reflect.ValueOf((*github.OrganizationPayload)(nil)),
		"PageBuildPayload":                    reflect.ValueOf((*github.PageBuildPayload)(nil)),
		"Parent":                              reflect.ValueOf((*github.Parent)(nil)),
		"PingPayload":                         reflect.ValueOf((*github.PingPayload)(nil)),
		"ProjectCardPayload":                  reflect.ValueOf((*github.ProjectCardPayload)(nil)),
		"ProjectColumnPayload":                reflect.ValueOf((*github.ProjectColumnPayload)(nil)),
		"ProjectPayload":                      reflect.ValueOf((*github.ProjectPayload)(nil)),
		"PublicPayload":                       reflect.ValueOf((*github.PublicPayload)(nil)),
		"PullRequestPayload":                  reflect.ValueOf((*github.PullRequestPayload)(nil)),
		"PullRequestReviewCommentPayload":     reflect.ValueOf((*github.PullRequestReviewCommentPayload)(nil)),
		"PullRequestReviewPayload":            reflect.ValueOf((*github.PullRequestReviewPayload)(nil)),
		"PushPayload":                         reflect.ValueOf((*github.PushPayload)(nil)),
		"ReleasePayload":                      reflect.ValueOf((*github.ReleasePayload)(nil)),
		"RepositoryPayload":                   reflect.ValueOf((*github.RepositoryPayload)(nil)),
		"RepositoryVulnerabilityAlertPayload": reflect.ValueOf((*github.RepositoryVulnerabilityAlertPayload)(nil)),
		"SecurityAdvisoryPayload":             reflect.ValueOf((*github.SecurityAdvisoryPayload)(nil)),
		"StatusPayload":                       reflect.ValueOf((*github.StatusPayload)(nil)),
		"TeamAddPayload":                      reflect.ValueOf((*github.TeamAddPayload)(nil)),
		"TeamPayload":                         reflect.ValueOf((*github.TeamPayload)(nil)),
		"WatchPayload":                        reflect.ValueOf((*github.WatchPayload)(nil)),
		"Webhook":                             reflect.ValueOf((*github.Webhook)(nil)),
		"WebhookOptions":                      reflect.ValueOf((*github.WebhookOptions)(nil)),
	}
}
